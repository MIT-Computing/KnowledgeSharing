#----------------------------------FEATURE: ERROR ANALYSIS BEGINS------------------------------#

# Define the analytical solution function
def analytical_solution(X, Y):
    return np.sin(np.pi * X) * np.sin(np.pi * Y) / (2 * np.pi**2)



# Solve the problem analtically
u_exact = analytical_solution(X, Y)

# Calculate error
error = np.abs(u - u_exact)


# Calculate error metrics
max_error = np.max(error)
mean_absolute_error = np.mean(error)
root_mean_square_error = np.sqrt(np.mean(error**2))

# Display error metrics
print(f"Max Error: {max_error}")
print(f"Mean Absolute Error: {mean_absolute_error}")
print(f"Root Mean Square Error: {root_mean_square_error}")


#----------------------------------ERROR ANALYSIS ENDS-------------------------------------#



#----------------------------------FEATURE: PROFILING BEGINS------------------------------#

start_time = time.time()  # Start timer
u = solveFD2_Poissons(nx, ny, dx, dy, f, size, u)
end_time = time.time()  # End timer

execution_time = end_time - start_time

print(f"Execution time: {execution_time} seconds")

#-----------------------------------PROFILING ENDS---------------------------------------#

#----------------------------------FEATURE: PARALLEL PROGRAMMING--------------------------#



if __name__ == '__main__':
    from multiprocessing import freeze_support
    freeze_support()
    # Solve Poisson equation using second order finite difference method
    u = solveFD2_Poissons(nx, ny, dx, dy, f, size, u)

    # Plot results
    plotPoissons(u, X, Y)


# ADD THE FOLLWING TO solver.py
def solveFD2_PoissonsPar(nx, ny, dx, dy, f, size, u):
    """
    Solve the Poisson equation using the finite difference method.
    
    Parameters
    ----------
    nx : int
        The number of grid points in the x-direction.
    ny : int
        The number of grid points in the y-direction.
    dx : float
        The grid spacing in the x-direction.
    dy : float
        The grid spacing in the y-direction.
    f : ndarray
        The source term of the Poisson equation.
    size : int
        The number of iterations to perform.
    u : ndarray
        The initial guess for the solution.

    Returns
    -------
    u : ndarray
        The numerical solution to the Poisson equation.
    """
    pool = Pool()
    args = [(nx, ny, dx, dy, f, size, u)]
    u = pool.starmap(_solveFD2_Poissons_worker, args)[0]
    pool.close()
    pool.join()
    return u

def _solveFD2_Poissons_worker(nx, ny, dx, dy, f, size, u):
    for it in range(size):
        un = u.copy()
        for i in range(1, nx - 1):
            for j in range(1, ny - 1):
                u[i, j] = (dx**2 * dy**2 * f[i, j] + dy**2 * (un[i - 1, j] + un[i + 1, j]) + dx**2 * (un[i, j - 1] + un[i, j + 1])) / (2 * (dx**2 + dy**2))
    return u
